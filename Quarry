--pastebin get nJNQmMZq
local xCoord, yCoord, zCoord = gps.locate()

local xQuarry
local yQuarry
local zQuarry

local xHome
local yHome
local zHome

local yTravel

local xProgress
local yProgress
local zProgress
local oProgress

local orientation
local orientations = {"north","east","south","west"}

local xDiff = {0,1,0,-1}
local zDiff = {-1,0,1,0}

local lineLenght
local working
local nLines
local qSize

local jobAvailable = true
local managerId = -1

local yMin = yCoord

local id = -1

function save()
	h = fs.open("config", "w")
	h.writeLine(tostring(xHome))
	h.writeLine(tostring(yHome))
	h.writeLine(tostring(zHome))
	h.writeLine(tostring(orientation))
	h.writeLine(tostring(xQuarry))
	h.writeLine(tostring(yMin))
	h.writeLine(tostring(zQuarry))
	h.writeLine(tostring(working))
	h.writeLine(tostring(qSize))
	h.writeLine(tostring(lineLenght))
	h.writeLine(tostring(nLines))
	h.flush()
	h.close()
end

function load()
	h = fs.open("config", "r")
	a = h.readLine()
	xHome = tonumber(a)
	a = h.readLine()
	yHome = tonumber(a)
	a = h.readLine()
	zHome = tonumber(a)
	a = h.readLine()
	orientation = tonumber(a)
	a = h.readLine()
	xQuarry = tonumber(a)
	a = h.readLine()
	yMin = tonumber(a)
	a = h.readLine()
	zQuarry = tonumber(a)
	a = h.readLine()
	working = tonumber(a)
	a = h.readLine()
	qSize = tonumber(a)
	a = h.readLine()
	lineLenght = tonumber(a)
	a = h.readLine()
	nLines = tonumber(a)
	h.close()
end

function refuel()
	if turtle.getFuelLevel() < 10000 then
		rednet.open("right")
		rednet.broadcast("Need fuel")
		while id == -1 do
			id, msg, dis = rednet.receive()
		end
		if msg == "yes" then
			rednet.send(id, tostring(xCoord))
			rednet.send(id, tostring(yCoord))
			rednet.send(id, tostring(zCoord))
			while turtle.getFuelLevel() < 30000 do
				rednet.send(id, "More")
				turtle.refuel()
			end
			rednet.send(id, "Done")
		end
	end
end

function inventoryFull()
	local full = false
	turtle.select(16)
	full = turtle.getItemCount(16) > 0
	turtle.select(1)
	return full
end

function left()
	orientation = orientation - 1
	orientation = (orientation - 1) % 4
	orientation = orientation + 1
	turtle.turnLeft()
	save()
end

function right()
	orientation = orientation - 1
	orientation = (orientation + 1) % 4
	orientation = orientation + 1
	turtle.turnRight()
	save()
end

function moveForward()
	xCoord = xCoord + xDiff[orientation]
	zCoord = zCoord + zDiff[orientation]
	moved = false
	while not(moved) do
		turtle.dig()
		moved = turtle.forward()
	end
	save()
end

function moveUp()
	yCoord = yCoord + 1
	moved = false
	while not(moved) do
		turtle.digUp()
		moved = turtle.up()
	end
	save()
end

function moveDown()
	yCoord = yCoord - 1
	moved = false
	while not(moved) do
		turtle.digDown()
		moved = turtle.down()
	end
	if yMin > yCoord then
		yMin = yCoord
	end
	save()
end

function setOrientation()
	local moved = false
	while not(moved) do
		turtle.dig()
		moved = turtle.forward()
	end
	xCur, yCur, zCur = gps.locate()
	if xCur < xCoord then
		orientation = 4
	elseif xCur > xCoord then
		orientation = 2
	elseif zCur < zCoord then
		orientation = 1
	elseif zCur > zCoord then
		orientation = 3
	end
	right()
	right()
	moved = false
	while not(moved) do
		turtle.dig()
		moved = turtle.forward()
	end
	left()
	left()
end

function setThings()
	xCoord, yCoord, zCoord = gps.locate()
	xHome = xCoord
	yHome = yCoord
	zHome = zCoord
	setOrientation()
	yTravel = 239
	yMin = yCoord
end

function setThingsNotLoaded()
	xCoord, yCoord, zCoord = gps.locate()
	yTravel = 239
end

function look(direction)
	while direction ~= orientations[orientation] do
		right()
	end
end

function goto(xTarget, yTarget, zTarget)
	while yCoord < yTarget do
		moveUp()
	end
	while yCoord > yTarget do
		moveDown()
	end
	if xTarget < xCoord then
		look("west")
		while xTarget < xCoord do
			moveForward()
		end
	end
	if xTarget > xCoord then
		look("east")
		while xTarget > xCoord do
			moveForward()
		end
	end
	if zTarget > zCoord then
		look("south")
		while zTarget > zCoord do
			moveForward()
		end
	end
	if zTarget < zCoord then
		look("north")
		while zTarget < zCoord do
			moveForward()
		end
	end
end

function returnItems()
	xProgress = xCoord
	yProgress = yCoord
	zProgress = zCoord
	oProgress = orientation
	print("Returning items")
	goto(xHome, yTravel, zHome)
	goto(xHome, yHome, zHome)
	for i = 1, 16 do
		turtle.select(i)
		turtle.dropDown()
	end
	turtle.select(1)
	--refuel()
	goto(xProgress, yTravel, zProgress)
	goto(xProgress, yProgress, zProgress)
	look(orientations[oProgress])
end

function digLine()
	lineLenght = qSize - 2
	while lineLenght ~= 0 do
		if inventoryFull() then
			returnItems()
		end
		moveForward()
		lineLenght = lineLenght - 1
		save()
	end
	--[[for i = 1, lineLenght-1 do
		if inventoryFull() then
			returnItems()
		end
		moveForward()
		save()
	end]]--
end

function digLayer()
	nLines = qSize
	while nLines ~= 1 do
		digLine()
		if qSize % 2 == 1 and nLines > 2 then
			if nLines % 2 == 1 then
				left()
				moveForward()
				left()
			else
				right()
				moveForward()
				right()
			end
		elseif nLines > 2 then
			if nLines % 2 == 1 then
				right()
				moveForward()
				right()
			else
				left()
				moveForward()
				left()
			end
		end
		nLines = nLines - 1
	end
	--[[for i = 1, nLines do
		digLine()
		if i % 2 == 1 and i < nLines then
			left()
			moveForward()
			left()
		elseif i < nLines then
			right()
			moveForward()
			right()
		end
	end]]--
	print("goingt to dig next layer")
	goto(xQuarry, yCoord, zQuarry)
	look("north")
	moveDown()
	yProgress = yCoord
end

function digQuarry(xTarget, yTarget, zTarget)
	xQuarry = xTarget
	yQuarry = yTarget
	zQuarry = zTarget
	if inventoryFull() then
		returnItems()
	end
	goto(xQuarry, yTravel, zQuarry)
	goto(xQuarry, yQuarry, zQuarry)
	look("north")
	yMin = yCoord
	while yMin > 6 do
		digLayer()
	end
	yProgress = 150
	goto(xQuarry, yQuarry, zQuarry)
	goto(xHome, yTravel, zHome)
	goto(xHome, yHome, zHome)
	yMin = 999
end

function getJob()
	while jobAvailable do
		rednet.broadcast(os.getComputerLabel())
		while id == -1 do
			id, msg, dis = rednet.receive()
		end
		if msg == "yes" then
			managerId = id
			id, xQuarry, dis = rednet.receive()
			id, yQuarry, dis = rednet.receive()
			id, zQuarry, dis = rednet.receive()
			id, qSize, dis = rednet.receive()
			rednet.send(id, "ok")
			qSize = tonumber(qSize)
			lineLenght = qSize - 2
			nLines = qSize - 1
			working = 1
			print("got job")
			xQuarry = tonumber(xQuarry)
			yQuarry = tonumber(yQuarry)
			zQuarry = tonumber(zQuarry)
			digQuarry(xQuarry, yQuarry, zQuarry)
			working = 0
		elseif msg == "no" then
			jobAvailable = false
			canWork = 0
		end
		id = -1
	end
end

rednet.open("right")
if fs.exists("config") then
	load()
	setThingsNotLoaded()
	print("Loaded!")
else
	setThings()
	print("Not loaded")
end
if working == 1 then
	x = xQuarry
	y = yMin
	z = zQuarry
	print("I have x: "..x.." y: "..y.." and z: "..z)
	print("I'm at "..xCoord.." "..yCoord.." "..zCoord)
	if inventoryFull() then
		returnItems()
	end
	print("going to work")
	digQuarry(x, y, z)
else
	print("need a job")
end
getJob()
